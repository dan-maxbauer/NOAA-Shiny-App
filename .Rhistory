my_csv2 <- reactive({
my_url <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state2,"-",input$parameters2,"-",input$scale2,"-",
input$month2,"-",input$years2[1],"-",input$years2[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
if(input$parameters2=="pdsi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="phdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="pmdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="zndx") {csv_data <- readr::read_csv(my_url,skip=3)}
else {csv_data <- readr::read_csv(my_url,skip=4)}
csv_data <- csv_data %>% mutate(Year = as.numeric(substr(Date, 1, 4)))
return(csv_data)
})
my_label2 <- renderText({
if(input$parameters2=="tavg") {"Average Temperature (°F)"}
else if (input$parameters2=="tmax") {print("Maximum Temperature (°F)")}
else if (input$parameters2=="tmin") {print("Minimum Temperature (°F)")}
else if (input$parameters2=="pcp"){print("Precipitation (inches)")}
else if (input$parameters2=="cdd"){print("Cooling Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters2=="hdd"){print("Heating Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters2=="pdsi"){print("PDSI")}
else if (input$parameters2=="phdi"){print("PHDI")}
else if (input$parameters2=="pmdi"){print("PMDI")}
else {print("Palmer Z-Index")}
})
my_scale2 <- renderText({
month_num <- as.numeric(input$month2)
scale_num <- as.numeric(input$scale2)
if ((month_num-scale_num+1)<1){num <- month_num-scale_num+13}
else {num <- month_num-scale_num+1}
scale_name <- as.character(month.name[num])
return(scale_name)
})
my_month2 <- renderText({
num <- as.numeric(input$month2)
month_name <- as.character(month.name[num])
return(month_name)
})
my_state2 <- renderText({
num <- as.numeric(input$state2)
state_name <- as.character(NOAA_states[num,])
return(state_name)
})
#graph3
my_csv3 <- reactive({
my_url <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state3,"-",input$parameters3,"-",input$scale3,"-",
input$month3,"-",input$years3[1],"-",input$years3[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
if(input$parameters3=="pdsi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="phdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="pmdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="zndx") {csv_data <- readr::read_csv(my_url,skip=3)}
else {csv_data <- readr::read_csv(my_url,skip=4)}
csv_data <- csv_data %>% mutate(Year = as.numeric(substr(Date, 1, 4)))
return(csv_data)
})
my_label3 <- renderText({
if(input$parameters3=="tavg") {"Average Temperature (°F)"}
else if (input$parameters3=="tmax") {print("Maximum Temperature (°F)")}
else if (input$parameters3=="tmin") {print("Minimum Temperature (°F)")}
else if (input$parameters3=="pcp"){print("Precipitation (inches)")}
else if (input$parameters3=="cdd"){print("Cooling Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters3=="hdd"){print("Heating Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters3=="pdsi"){print("PDSI")}
else if (input$parameters3=="phdi"){print("PHDI")}
else if (input$parameters3=="pmdi"){print("PMDI")}
else {print("Palmer Z-Index")}
})
my_scale3 <- renderText({
month_num <- as.numeric(input$month3)
scale_num <- as.numeric(input$scale3)
if ((month_num-scale_num+1)<1){num <- month_num-scale_num+13}
else {num <- month_num-scale_num+1}
scale_name <- as.character(month.name[num])
return(scale_name)
})
my_month3 <- renderText({
num <- as.numeric(input$month3)
month_name <- as.character(month.name[num])
return(month_name)
})
my_state3 <- renderText({
num <- as.numeric(input$state3)
state_name <- as.character(NOAA_states[num,])
return(state_name)
})
##outputs
output$my_tsplot <- renderPlotly({ ggplotly(
if(input$graph3==TRUE) {
ggplot(data=my_csv(), aes(x=Year,y=Value)) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE, color="dimgrey") + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value), color= "grey", lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_line(data=my_csv2(), color="blue") + geom_point(data = my_csv2(), color="blue") + geom_smooth(data=my_csv2(), method="lm", se=FALSE, color="darkblue") +
geom_hline(yintercept=mean(my_csv2()$Value), color= "cornflowerblue", lty=2) +
##graph3
geom_line(data=my_csv3(), color="red") + geom_point(data = my_csv3(), color="red") + geom_smooth(data=my_csv3(), method="lm", se=FALSE, color="red4") +
geom_hline(yintercept=mean(my_csv3()$Value), color= "pink", lty=2)
}
else if(input$graph2==TRUE) {
ggplot(data=my_csv(), aes(x=Year,y=Value)) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE, color="dimgrey") + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value), color= "grey", lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_line(data=my_csv2(), color="blue") + geom_point(data = my_csv2(), color="blue") + geom_smooth(data=my_csv2(), method="lm", se=FALSE, color="darkblue") +
geom_hline(yintercept=mean(my_csv2()$Value), color= "cornflowerblue", lty=2)
}
else {ggplot(data=my_csv(), aes(x=Year,y=Value)) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE) + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value),  lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))}
)})
output$my_dsplot <- renderPlotly({ ggplotly(
if(input$graph3==TRUE){
ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_density(data=my_csv2(),color="blue") + geom_vline(aes(xintercept = mean(my_csv2()$Value)), lty = 2,color="blue")+
##graph2
geom_density(data=my_csv3(),color="red") + geom_vline(aes(xintercept = mean(my_csv3()$Value)), lty = 2,color="red")
}
else if(input$graph2==TRUE){
ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_density(data=my_csv2(),color="blue") + geom_vline(aes(xintercept = mean(my_csv2()$Value)), lty = 2,color="blue")
}
else {ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))}
)})
output$my_mean <- renderText({
plot_csv <- my_csv()
plot_label <- as.character(my_label())
plot_formula <- paste("Mean",plot_label,"=",round(mean(plot_csv$Value),2))
return(plot_formula)
})
output$my_line <- renderText({
plot_csv <- my_csv()
lm <- lm(Value ~ Year, data = plot_csv)
summary_lm <- summary(lm)
slope <- round(summary_lm$coefficients[2],3)
intercept <- round(summary_lm$coefficients[1],2)
paste("Value =",intercept, "+", slope,"*Year",sep="")
#return(intercept)
})
output$my_url <- renderText({
plot_formula <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state,"-",input$parameters,"-",input$scale,"-",
input$month,"-",input$years[1],"-",input$years[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
return(plot_formula)
})
})
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
runApp('Documents/GitHub/NOAA-Shiny-App')
library(shiny)
library(tidyverse)
library(plotly)
shiny :: runGitHub("NOAA-Shiny-App", username = "jaren-yambing")
library(shiny)
library(tidyverse)
library(plotly)
shiny::runGitHub("NOAA-Shiny-App", username="jaren-yambing")
shiny::runGitHub("NOAA-Shiny-App", username="jaren-yambing")
library(shiny)
library(tidyverse)
library(plotly)
ui <- fluidPage(sidebarLayout(position = "right",
sidebarPanel(navbarPage(title="Options",
tabPanel("Graph 1",
selectInput("parameters", h3("Parameters"),
choices = list("Avg Temperature"="tavg","Max Temperature"="tmax","Min Temperature"="tmin",
"Precipitation"="pcp","Cooling Degree Days"="cdd","Heating Degree Days"="hdd",
"Palmer Drought Severity Index"="pdsi","Palmer Hydrological Drought Index"="phdi",
"Palmer Modified Drought Index"="pmdi","Palmer Z-Index"="zndx")),
selectInput("scale", h3("Time Scale"),
choices = list("1-Month"=1,"2-Month"=2,"3-Month"=3,"4-Month"=4,"5-Month"=5,"6-Month"=6,
"7-Month"=7,"8-Month"=8,"9-Month"=9,"10-Month"=10,"11-Month"=11,"12-Month"=12)),
selectInput("month", h3("Month"),
choices = list("January"=1,"February"=2,"March"=3,"April"=4,"May"=5,"June"=6,
"July"=7,"August"=8,"September"=9,"October"=10,"November"=11,"December"=12)),
h6("Please choose the last month in a Time Scale (ex. choose December and 12-Month for data for the entire calendar year)"),
sliderInput("years", h3("Years"),
min = 1895,max = 2019,value = c(1980,2010)),
selectInput("state", h3("State"),
choices = list("Alabama"=1,"Alaska"=50,"Arizona"=2,"Arkansas"=3,"California"=4,
"Colorado"=5,"Connecticut"=6,"Delaware"=7,"Florida"=8,"Georgia"=9,
"Hawaii"=51,"Idaho"=10,"Illinois"=11,"Indiana"=12,"Iowa"=13,
"Kansas"=14,"Kentucky"=15,"Louisiana"=16,"Maine"=17,"Maryland"=18,
"Massachusetts"=19,"Michigan"=20,"Minnesota"=21,"Mississippi"=22,"Missouri"=23,
"Montana"=24,"Nebraska"=25,"Nevada"=26,"New Hampshire"=27,"New Jersey"=28,
"New Mexico"=29,"New York"=30,"North Carolina"=31,"North Dakota"=32,"Ohio"=33,
"Oklahoma"=34,"Oregon"=35,"Pennsylvania"=36,"Rhode Island"=37,"South Carolina"=38,
"South Dakota"=39,"Tennessee"=40,"Texas"=41,"Utah"=42,"Vermont"=43,
"Virginia"=44,"Washington"=45,"West Virginia"=46,"Wisconsin"=47,"Wyoming"=48))
),
tabPanel("Graph 2",
checkboxInput("graph2",h4("Click here to add a second dataset to your graph")),
h6("Please keep parameters the same when comparing two graphs"),
selectInput("parameters2", h3("Parameters"),
choices = list("Avg Temperature"="tavg","Max Temperature"="tmax","Min Temperature"="tmin",
"Precipitation"="pcp","Cooling Degree Days"="cdd","Heating Degree Days"="hdd",
"Palmer Drought Severity Index"="pdsi","Palmer Hydrological Drought Index"="phdi",
"Palmer Modified Drought Index"="pmdi","Palmer Z-Index"="zndx")),
selectInput("scale2", h3("Time Scale"),
choices = list("1-Month"=1,"2-Month"=2,"3-Month"=3,"4-Month"=4,"5-Month"=5,"6-Month"=6,
"7-Month"=7,"8-Month"=8,"9-Month"=9,"10-Month"=10,"11-Month"=11,"12-Month"=12)),
selectInput("month2", h3("Month"),
choices = list("January"=1,"February"=2,"March"=3,"April"=4,"May"=5,"June"=6,
"July"=7,"August"=8,"September"=9,"October"=10,"November"=11,"December"=12)),
h6("Please choose the last month in a Time Scale (ex. choose December and 12-Month for data for the entire calendar year)"),
sliderInput("years2", h3("Years"),
min = 1895,max = 2019,value = c(1980,2010)),
selectInput("state2", h3("State"),
choices = list("Alabama"=1,"Alaska"=50,"Arizona"=2,"Arkansas"=3,"California"=4,
"Colorado"=5,"Connecticut"=6,"Delaware"=7,"Florida"=8,"Georgia"=9,
"Hawaii"=51,"Idaho"=10,"Illinois"=11,"Indiana"=12,"Iowa"=13,
"Kansas"=14,"Kentucky"=15,"Louisiana"=16,"Maine"=17,"Maryland"=18,
"Massachusetts"=19,"Michigan"=20,"Minnesota"=21,"Mississippi"=22,"Missouri"=23,
"Montana"=24,"Nebraska"=25,"Nevada"=26,"New Hampshire"=27,"New Jersey"=28,
"New Mexico"=29,"New York"=30,"North Carolina"=31,"North Dakota"=32,"Ohio"=33,
"Oklahoma"=34,"Oregon"=35,"Pennsylvania"=36,"Rhode Island"=37,"South Carolina"=38,
"South Dakota"=39,"Tennessee"=40,"Texas"=41,"Utah"=42,"Vermont"=43,
"Virginia"=44,"Washington"=45,"West Virginia"=46,"Wisconsin"=47,"Wyoming"=48))
),
tabPanel("Graph 3",
checkboxInput("graph3",h4("Click here to add a third dataset to your graph")),
h6("Please keep parameters the same when comparing three graphs"),
selectInput("parameters3", h3("Parameters"),
choices = list("Avg Temperature"="tavg","Max Temperature"="tmax","Min Temperature"="tmin",
"Precipitation"="pcp","Cooling Degree Days"="cdd","Heating Degree Days"="hdd",
"Palmer Drought Severity Index"="pdsi","Palmer Hydrological Drought Index"="phdi",
"Palmer Modified Drought Index"="pmdi","Palmer Z-Index"="zndx")),
selectInput("scale3", h3("Time Scale"),
choices = list("1-Month"=1,"2-Month"=2,"3-Month"=3,"4-Month"=4,"5-Month"=5,"6-Month"=6,
"7-Month"=7,"8-Month"=8,"9-Month"=9,"10-Month"=10,"11-Month"=11,"12-Month"=12)),
selectInput("month3", h3("Month"),
choices = list("January"=1,"February"=2,"March"=3,"April"=4,"May"=5,"June"=6,
"July"=7,"August"=8,"September"=9,"October"=10,"November"=11,"December"=12)),
h6("Please choose the last month in a Time Scale (ex. choose December and 12-Month for data for the entire calendar year)"),
sliderInput("years3", h3("Years"),
min = 1895,max = 2019,value = c(1980,2010)),
selectInput("state3", h3("State"),
choices = list("Alabama"=1,"Alaska"=50,"Arizona"=2,"Arkansas"=3,"California"=4,
"Colorado"=5,"Connecticut"=6,"Delaware"=7,"Florida"=8,"Georgia"=9,
"Hawaii"=51,"Idaho"=10,"Illinois"=11,"Indiana"=12,"Iowa"=13,
"Kansas"=14,"Kentucky"=15,"Louisiana"=16,"Maine"=17,"Maryland"=18,
"Massachusetts"=19,"Michigan"=20,"Minnesota"=21,"Mississippi"=22,"Missouri"=23,
"Montana"=24,"Nebraska"=25,"Nevada"=26,"New Hampshire"=27,"New Jersey"=28,
"New Mexico"=29,"New York"=30,"North Carolina"=31,"North Dakota"=32,"Ohio"=33,
"Oklahoma"=34,"Oregon"=35,"Pennsylvania"=36,"Rhode Island"=37,"South Carolina"=38,
"South Dakota"=39,"Tennessee"=40,"Texas"=41,"Utah"=42,"Vermont"=43,
"Virginia"=44,"Washington"=45,"West Virginia"=46,"Wisconsin"=47,"Wyoming"=48))
)
)),
mainPanel(navbarPage(title = "Climate at a Glance",
tabPanel("Home",
h1("Carleton Climate at a Glance"),
h6("Welcome to Carleton Climate at a Glance. This Shiny app was created in response to the slow loading time of the website
NOAA Climate at a Glance. Although this app does not have all the capabilities of the original website, it contains additional
options such as density graphs and overlaying graphs."),
a(href="https://www.ncdc.noaa.gov/cag/", "Click here to go to the original NOAA website!"),
hr(),
h3("Parameter Definitions"),
h4("Avg Temperature"), p("Mean Temperature (°F) of a specified area over a specified time interval"),
h4("Max Temperature"), p("Hottest Temperature (°F) recorded in a specified area over a specified time interval"),
h4("Min Temperature"), p("Coldest Temperature (°F) recorded in a specified area over a specified time interval"),
h4("Precipitation"), p("Total Precipitation (inches) in a specified area over a specified time interval"),
h4("Cooling Degree Days"), p("A cooling degree day (CDD) is a measurement designed to quantify the demand for energy needed to cool buildings.
It is the number of degrees that a day's average temperature is above 65°F"),
h4("Heating Degree Days"), p("A heating degree day (HDD) is a measurement designed to quantify the demand for energy needed to heat a building.
It is the number of degrees that a day's average temperature is below 65°F"),
h4("Palmer Drought Severity Index"), p("The Palmer Drought Severity Index (PDSI) is a measurement of dryness based on recent precipitation and temperature.
Dry conditions are represented by negative values while wet conditions are represented by positive values."),
h4("Palmer Hydrological Drought Index"), p("The Palmer Hydrological Drought Index (PHDI) measures hydrological impacts of drought."),
h4("Palmer Modified Drought Index"), p("The Palmer Modified Drought Index (PMDI) is a modified verison of the PDSI created by Heddinghaus and Sabol (1991)."),
h4("Palmer Z-Index"), p("The Palmer Z-Index measures short-term drought on a montly scale"),
h4("Please note that the Palmer Indices are not available for all locations (ex. Alaska)"),
a(href="https://www.ncdc.noaa.gov/temp-and-precip/drought/historical-palmers/overview", "Click here to go to learn more about the Palmer Indices!")
),
tabPanel("Time Series",
mainPanel(
plotlyOutput("my_tsplot"),
textOutput("my_mean"),
textOutput("my_line"),
h5("Copy and paste your dataset URL below"),
a(href=textOutput("my_url"), "Click here to visit your dataset!"))),
tabPanel("Distribution Plots",
mainPanel(
plotlyOutput("my_dsplot"),
h5("hello"))),
tabPanel("Resources",
mainPanel(
h3("Questions?"),
h6("Please email Dan Maxbauer (dmaxbauer@carleton.edu) or Jaren Yambing (yambingj@carleton.edu) with any questions or issues you come across. Enjoy!"),
h3("Useful Links!"),
a(href="https://www.ncdc.noaa.gov/cag/", "NOAA Climate at a Glance"),
br(),
a(href="https://github.com/jaren-yambing/NOAA-Shiny-App","GitHub Repository of the App Code")
))
))
))
shinyServer(function(input, output) {
NOAA_states <- as.data.frame(state.name)
NOAA_states <- as.data.frame(NOAA_states[-c(2,11),])
colnames(NOAA_states) <- "States"
NOAA_states <- rbind(NOAA_states,data.frame("States" = c("NULL","Alaska","Hawaii")))
##inputs
#graph1
my_csv <- reactive({
my_url <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state,"-",input$parameters,"-",input$scale,"-",
input$month,"-",input$years[1],"-",input$years[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
if(input$parameters=="pdsi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters=="phdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters=="pmdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters=="zndx") {csv_data <- readr::read_csv(my_url,skip=3)}
else {csv_data <- readr::read_csv(my_url,skip=4)}
csv_data <- csv_data %>% mutate(Year = as.numeric(substr(Date, 1, 4)))
return(csv_data)
})
my_label <- renderText({
if(input$parameters=="tavg") {"Average Temperature (°F)"}
else if (input$parameters=="tmax") {print("Maximum Temperature (°F)")}
else if (input$parameters=="tmin") {print("Minimum Temperature (°F)")}
else if (input$parameters=="pcp"){print("Precipitation (inches)")}
else if (input$parameters=="cdd"){print("Cooling Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters=="hdd"){print("Heating Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters=="pdsi"){print("PDSI")}
else if (input$parameters=="phdi"){print("PHDI")}
else if (input$parameters=="pmdi"){print("PMDI")}
else {print("Palmer Z-Index")}
})
my_scale <- renderText({
month_num <- as.numeric(input$month)
scale_num <- as.numeric(input$scale)
if ((month_num-scale_num+1)<1){num <- month_num-scale_num+13}
else {num <- month_num-scale_num+1}
scale_name <- as.character(month.name[num])
return(scale_name)
})
my_month <- renderText({
num <- as.numeric(input$month)
month_name <- as.character(month.name[num])
return(month_name)
})
my_state <- renderText({
num <- as.numeric(input$state)
state_name <- as.character(NOAA_states[num,])
return(state_name)
})
#graph2
my_csv2 <- reactive({
my_url <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state2,"-",input$parameters2,"-",input$scale2,"-",
input$month2,"-",input$years2[1],"-",input$years2[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
if(input$parameters2=="pdsi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="phdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="pmdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters2=="zndx") {csv_data <- readr::read_csv(my_url,skip=3)}
else {csv_data <- readr::read_csv(my_url,skip=4)}
csv_data <- csv_data %>% mutate(Year = as.numeric(substr(Date, 1, 4)))
return(csv_data)
})
my_label2 <- renderText({
if(input$parameters2=="tavg") {"Average Temperature (°F)"}
else if (input$parameters2=="tmax") {print("Maximum Temperature (°F)")}
else if (input$parameters2=="tmin") {print("Minimum Temperature (°F)")}
else if (input$parameters2=="pcp"){print("Precipitation (inches)")}
else if (input$parameters2=="cdd"){print("Cooling Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters2=="hdd"){print("Heating Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters2=="pdsi"){print("PDSI")}
else if (input$parameters2=="phdi"){print("PHDI")}
else if (input$parameters2=="pmdi"){print("PMDI")}
else {print("Palmer Z-Index")}
})
my_scale2 <- renderText({
month_num <- as.numeric(input$month2)
scale_num <- as.numeric(input$scale2)
if ((month_num-scale_num+1)<1){num <- month_num-scale_num+13}
else {num <- month_num-scale_num+1}
scale_name <- as.character(month.name[num])
return(scale_name)
})
my_month2 <- renderText({
num <- as.numeric(input$month2)
month_name <- as.character(month.name[num])
return(month_name)
})
my_state2 <- renderText({
num <- as.numeric(input$state2)
state_name <- as.character(NOAA_states[num,])
return(state_name)
})
#graph3
my_csv3 <- reactive({
my_url <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state3,"-",input$parameters3,"-",input$scale3,"-",
input$month3,"-",input$years3[1],"-",input$years3[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
if(input$parameters3=="pdsi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="phdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="pmdi") {csv_data <- readr::read_csv(my_url,skip=3)}
else if (input$parameters3=="zndx") {csv_data <- readr::read_csv(my_url,skip=3)}
else {csv_data <- readr::read_csv(my_url,skip=4)}
csv_data <- csv_data %>% mutate(Year = as.numeric(substr(Date, 1, 4)))
return(csv_data)
})
my_label3 <- renderText({
if(input$parameters3=="tavg") {"Average Temperature (°F)"}
else if (input$parameters3=="tmax") {print("Maximum Temperature (°F)")}
else if (input$parameters3=="tmin") {print("Minimum Temperature (°F)")}
else if (input$parameters3=="pcp"){print("Precipitation (inches)")}
else if (input$parameters3=="cdd"){print("Cooling Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters3=="hdd"){print("Heating Degree Days (Fahrenheit Degree-Days)")}
else if (input$parameters3=="pdsi"){print("PDSI")}
else if (input$parameters3=="phdi"){print("PHDI")}
else if (input$parameters3=="pmdi"){print("PMDI")}
else {print("Palmer Z-Index")}
})
my_scale3 <- renderText({
month_num <- as.numeric(input$month3)
scale_num <- as.numeric(input$scale3)
if ((month_num-scale_num+1)<1){num <- month_num-scale_num+13}
else {num <- month_num-scale_num+1}
scale_name <- as.character(month.name[num])
return(scale_name)
})
my_month3 <- renderText({
num <- as.numeric(input$month3)
month_name <- as.character(month.name[num])
return(month_name)
})
my_state3 <- renderText({
num <- as.numeric(input$state3)
state_name <- as.character(NOAA_states[num,])
return(state_name)
})
##outputs
output$my_tsplot <- renderPlotly({ ggplotly(
if(input$graph3==TRUE) {
ggplot(data=my_csv(), aes(x=Year,y=Value)) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE, color="dimgrey") + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value), color= "grey", lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_line(data=my_csv2(), color="blue") + geom_point(data = my_csv2(), color="blue") + geom_smooth(data=my_csv2(), method="lm", se=FALSE, color="darkblue") +
geom_hline(yintercept=mean(my_csv2()$Value), color= "cornflowerblue", lty=2) +
##graph3
geom_line(data=my_csv3(), color="red") + geom_point(data = my_csv3(), color="red") + geom_smooth(data=my_csv3(), method="lm", se=FALSE, color="red4") +
geom_hline(yintercept=mean(my_csv3()$Value), color= "pink", lty=2)
}
else if(input$graph2==TRUE) {
ggplot(data=my_csv(), aes(x=Year,y=Value)) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE, color="dimgrey") + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value), color= "grey", lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_line(data=my_csv2(), color="blue") + geom_point(data = my_csv2(), color="blue") + geom_smooth(data=my_csv2(), method="lm", se=FALSE, color="darkblue") +
geom_hline(yintercept=mean(my_csv2()$Value), color= "cornflowerblue", lty=2)
}
else {ggplot(data=my_csv(), aes(x=Year,y=Value, color="yes")) + geom_line() + geom_point() + geom_smooth(method="lm", se=FALSE) + theme_classic() +
xlab("Years") + ylab(my_label()) + geom_hline(yintercept=mean(my_csv()$Value),  lty=2)+
ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))}
)})
output$my_dsplot <- renderPlotly({ ggplotly(
if(input$graph3==TRUE){
ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_density(data=my_csv2(),color="blue") + geom_vline(aes(xintercept = mean(my_csv2()$Value)), lty = 2,color="blue")+
##graph2
geom_density(data=my_csv3(),color="red") + geom_vline(aes(xintercept = mean(my_csv3()$Value)), lty = 2,color="red")
}
else if(input$graph2==TRUE){
ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))+
##graph2
geom_density(data=my_csv2(),color="blue") + geom_vline(aes(xintercept = mean(my_csv2()$Value)), lty = 2,color="blue")
}
else {ggplot(data=my_csv(), aes(Value)) + geom_density() +geom_vline(aes(xintercept = mean(Value)), lty = 2,) + theme_classic() +
xlab(my_label()) + ggtitle(paste(my_scale(),"-",my_month(),my_label(),"in",my_state(),"from",input$years[1],"to",input$years[2]))}
)})
output$my_mean <- renderText({
plot_csv <- my_csv()
plot_label <- as.character(my_label())
plot_formula <- paste("Mean",plot_label,"=",round(mean(plot_csv$Value),2))
return(plot_formula)
})
output$my_line <- renderText({
plot_csv <- my_csv()
lm <- lm(Value ~ Year, data = plot_csv)
summary_lm <- summary(lm)
slope <- round(summary_lm$coefficients[2],3)
intercept <- round(summary_lm$coefficients[1],2)
paste("Value =",intercept, "+", slope,"*Year",sep="")
#return(intercept)
})
output$my_url <- renderText({
plot_formula <- paste("https://www.ncdc.noaa.gov/cag/statewide/time-series/",
input$state,"-",input$parameters,"-",input$scale,"-",
input$month,"-",input$years[1],"-",input$years[2],
".csv?base_prd=true&begbaseyear=1901&endbaseyear=2000",sep = "")
return(plot_formula)
})
})
runApp('Documents/GitHub/NOAA-Shiny-App')
